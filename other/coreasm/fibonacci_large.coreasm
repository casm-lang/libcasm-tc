CoreASM fibbo

//  
//  Copyright (c) 2014-2017 CASM Organization
//  All rights reserved.
//  
//  Developed by: Philipp Paulweber
//                Emmanuel Pescosta
//                https://github.com/casm-lang/libcasm-tc
//  
//  This file is part of libcasm-tc.
//  
//  libcasm-tc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  
//  libcasm-tc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License
//  along with libcasm-tc. If not, see <http://www.gnu.org/licenses/>.
//  

use StandardPlugins
use ConditionalRule
use Math

init foo

rule foo = 
    let n = 7500 in
        seq
            print "Fibonacci(" + n + ") using dynamic programming: " 
            fibo_d(n)
            print "=" + fibo(n)
            program(self) := undef
        endseq

function fibo : Int -> Int

rule fibo_d( x ) = 
    iterate
        if fibo(x) = undef then { 
            if x < 0 then fibo(x) := 0
            else if x < 2 then fibo(x) := x
            else seq
                fibo_d(x-2)
                fibo_d(x-1)
                fibo(x) := fibo(x-2) + fibo(x-1)
            endseq
        }

