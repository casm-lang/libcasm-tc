//
//  Copyright (c) 2014-2017 CASM Organization
//  All rights reserved.
//
//  Developed by: Philipp Paulweber
//                Emmanuel Pescosta
//                https://github.com/casm-lang/libcasm-tc
//
//  This file is part of libcasm-tc.
//
//  libcasm-tc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  libcasm-tc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with libcasm-tc. If not, see <http://www.gnu.org/licenses/>.
//


CASM init foo

function array : Integer -> Integer
function i : -> Integer
function j : -> Integer

rule foo =
{|
    forall k in [0..10000] do
        array(k) := k
/*
    program(self) := sieve
|}

rule sieve = 
{|
*/    i := 2
    iterate    
        if i * i <= 10000 then
        {|
        j := i 
        iterate
            if i * j <= 10000 then
            {
                array(i*j) := undef
                j := j + 1
            }
            i := i + 1
        |}

    forall k in [0..10000] do
        if array(k) != undef then
            println( dec(array(k)) + " " )

    program(self) := undef
|}

