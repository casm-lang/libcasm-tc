//
//  Copyright (c) 2014-2017 CASM Organization
//  All rights reserved.
//
//  Developed by: Philipp Paulweber
//                Emmanuel Pescosta
//                https://github.com/casm-lang/libcasm-tc
//
//  This file is part of libcasm-tc.
//
//  libcasm-tc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  libcasm-tc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with libcasm-tc. If not, see <http://www.gnu.org/licenses/>.
//

CASM init GameOfLife

/*
 * Start pattern:
 *
 * X X X
 * X   X
 * X   X
 *
 * X   X
 * X   X
 * X X X
 *
 * should terminate after 54 steps
 *
 * from https://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens
 */
function alive : Integer * Integer -> Boolean defined { false } initially {
    (50, 45) -> true, (51, 45) -> true, (52, 45) -> true,
    (50, 46) -> true,                   (52, 46) -> true,
    (50, 47) -> true,                   (52, 47) -> true,

    (50, 49) -> true,                   (52, 49) -> true,
    (50, 50) -> true,                   (52, 50) -> true,
    (50, 51) -> true, (51, 51) -> true, (52, 51) -> true
}

derived aliveNeighbours(x, y) -> Integer
    = asInteger(alive(x - 1, y - 1))
    + asInteger(alive(x, y - 1))
    + asInteger(alive(x + 1, y - 1))
    + asInteger(alive(x - 1, y))
    + asInteger(alive(x + 1, y))
    + asInteger(alive(x - 1, y + 1))
    + asInteger(alive(x, y + 1))
    + asInteger(alive(x + 1, y + 1))

rule updateCell(x, y) =
    let c = aliveNeighbours(x, y) in {
        if c = 3 then {
            if not alive(x, y) then alive(x, y) := true
        }
        if (c < 2) or (c > 3) then {
            if alive(x, y) then alive(x, y) := false
        }
    }

rule GameOfLife =
    forall x in [1..100] do
        forall y in [1..100] do
            call updateCell(x, y)
