//
//  Copyright (c) 2014-2017 CASM Organization
//  All rights reserved.
//
//  Developed by: Philipp Paulweber
//                Emmanuel Pescosta
//                https://github.com/casm-lang/libcasm-tc
//
//  This file is part of libcasm-tc.
//
//  libcasm-tc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  libcasm-tc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with libcasm-tc. If not, see <http://www.gnu.org/licenses/>.
//

CASM init MonteCarloPi

function hits : -> Integer initially { 0 }
function misses : -> Integer initially { 0 }
function iterations : -> Integer initially { 1'000'000 }

derived inUnitCircle(x, y) -> Boolean =
    sqrt(x^2 + y^2) <= 1.0

rule ThrowTheDart =
    choose x in [-1.0 .. 1.0] do
        choose y in [-1.0 .. 1.0] do
            if inUnitCircle(x, y) then {
                hits := hits + 1
            } else {
                misses := misses + 1
            }

rule MonteCarloPi =
    if iterations > 0 then {
        call ThrowTheDart
        iterations := iterations - 1
    } else {
        let estimatedPi = (hits * 4.0) / (hits + misses) in
            println("Estimation of PI: " + asString(estimatedPi))
    }
