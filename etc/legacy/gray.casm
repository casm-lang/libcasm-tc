//
//  Copyright (C) 2014-2020 CASM Organization <https://casm-lang.org>
//  All rights reserved.
//
//  Developed by: Philipp Paulweber
//                Emmanuel Pescosta
//                <https://github.com/casm-lang/libcasm-tc>
//
//  This file is part of libcasm-tc.
//
//  libcasm-tc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  libcasm-tc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with libcasm-tc. If not, see <http://www.gnu.org/licenses/>.
//
//  Additional permission under GNU GPL version 3 section 7
//
//  libcasm-tc is distributed under the terms of the GNU General Public License
//  with the following clarification and special exception: Linking libcasm-tc
//  statically or dynamically with other modules is making a combined work
//  based on libcasm-tc. Thus, the terms and conditions of the GNU General
//  Public License cover the whole combination. As a special exception,
//  the copyright holders of libcasm-tc give you permission to link libcasm-tc
//  with independent modules to produce an executable, regardless of the
//  license terms of these independent modules, and to copy and distribute
//  the resulting executable under terms of your choice, provided that you
//  also meet, for each linked independent module, the terms and conditions
//  of the license of that module. An independent module is a module which
//  is not derived from or based on libcasm-tc. If you modify libcasm-tc, you
//  may extend this exception to your version of the library, but you are
//  not obliged to do so. If you do not wish to do so, delete this exception
//  statement from your version.
//


CASM init foo

derived nrbits = 8

function inputnr: -> Integer
function input  : Integer -> Boolean
function output1 : Integer -> Boolean
function output2 : Integer -> Boolean


// gray = bin XOR (bin >> 1)
rule gray1(digit : Integer) = {
    if digit < nrbits-1 then
        output1(digit) := input(digit) xor input(digit+1)
    else
        output1(digit) := input(digit)
}

// idea: bit 0 cycles through 0,1,1,0; bit 1 cycles through 0,0,1,1,1,1,0,0 (double the cycle)
rule gray2(digit : Integer) = 
    case (inputnr/pow(2,digit)) % 4 of {
       0: output2(digit) := false
       1: output2(digit) := true
       2: output2(digit) := true
       3: output2(digit) := false
    }


rule foo = 
    if false then {
        program(self) := @main    
    } else     {
        inputnr := 0
        program(self) := @main2
    }

rule main =
{|
    gray1(0)
    gray2(0)
    program(self) := undef
|}

// all 4 bit numbers and their gray encoding
rule main2 = {
    if inputnr < pow(2,nrbits) then
    {|
        forall i in [0..7] do    {
            input(i) := Int2Boolean((inputnr / pow(2,i)) % 2)
        }
        forall i in [0..7] do    {
            gray1(i)
            gray2(i)
        }
        inputnr := inputnr + 1
        print (inputnr) + "=" + (output1(0)) + (output1(1)) + (output1(2)) + (output1(3)) + (output1(4)) + (output1(5))+ (output1(6)) + (output1(7)) + ", " 
                + (output2(0)) + (output2(1)) + (output2(2)) + (output2(3))+ (output2(4)) + (output2(5))+ (output2(6))+ (output2(7))
        assert output1(0) = output2(0)
        assert output1(1) = output2(1)
        assert output1(2) = output2(2)
        assert output1(3) = output2(3)
        assert output1(4) = output2(4)
        assert output1(5) = output2(5)
        assert output1(6) = output2(6)
        assert output1(7) = output2(7)
    |}
    else
        program(self) := undef
}
