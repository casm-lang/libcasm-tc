// Railroad crossing example
// Adopted from https://github.com/CoreASM/coreasm.core/blob/master/org.coreasm.engine/test-rsc/without_test_class/RailroadCrossing.coreasm

CASM

enumeration Agent = {
    TrackController,
    GateController,
    Observer,
    Environment,
    Clock
}

init {
    (TrackController) -> @TrackControl,
    (GateController) -> @GateControl,
    (Observer) -> @ObserverProgram,
    (Environment) -> @EnvironmentProgram,
    (Clock) -> @TimeTick
}

enumeration Track = {
    Track1,
    Track2
}

enumeration TrackStatus = {
    Empty,
    Coming,
    Crossing
}

enumeration Direction = {
    Open,
    Close
}

enumeration GateState = {
    Opened,
    Closed
}

[static] function infinity : -> Integer = { 999999999 } // FIXME Integer should provide it

// parameters
[static] function dmin : -> Integer = { 5 }
[static] function dmax : -> Integer = { 10 }
[static] function dopen : -> Integer = { 2 }
[static] function dclose : -> Integer = { 2 }
[static] function waitTime : -> Integer = { 3 }

function deadline : Track -> Integer defined { infinity }
function trackStatus : Track -> TrackStatus defined { Empty }
function dir : -> Direction
function gateState : -> GateState = { Opened }

derived randomProbability -> Decimal =
    choose x in [0.0 .. 1.0] do x

// ---------------------------------------------------------------------------

function now : -> Integer = { 1 }

rule TimeTick =
    now := now + 1

// ---------------------------------------------------------------------------

rule GateControl =
{
    if dir = Open and gateState = Closed then
        gateState := Opened

    if dir = Close and gateState = Opened then
        gateState := Closed
}

// ---------------------------------------------------------------------------

// Is it safe to open the guard?
derived safeToOpen -> Boolean =
    forall t in Track holds trackStatus(t) = Empty or (now + dopen) < deadline(t)

rule TrackControl =
{
    forall t in Track do
    {
        SetDeadline(t)
        SignalClose(t)
        ClearDeadline(t)
    }

    SignalOpen
}

rule SetDeadline(x : Track) =
    if trackStatus(x) = Coming and deadline(x) = infinity then
        deadline(x) := now + waitTime

rule SignalClose(x : Track) =
    if now >= deadline(x) and now <= deadline(x) + 1 then
        dir := Close

rule ClearDeadline(x : Track) =
    if trackStatus(x) = Empty and deadline(x) < infinity then
        deadline(x) := infinity

rule SignalOpen =
    if dir = Close and safeToOpen then
        dir := Open

// ---------------------------------------------------------------------------

rule ObserverProgram =
{
    println("Time: " + now as String + " seconds")
    forall t in Track do
        println("Track " + t as String + " is " + trackStatus(t) as String)
    println("Gate is " + gateState as String + "\n")

    if now >= 60 then
        forall a in Agent do
            program(a) := undef
}

// ---------------------------------------------------------------------------

function passingTime : Track -> Integer

rule EnvironmentProgram =
    choose t in Track do
    {
        if trackStatus(t) = Empty then
            if randomProbability < 0.05 then
            {
                trackStatus(t) := Coming
                passingTime(t) := now + dmin
            }

        if trackStatus(t) = Coming then
            if passingTime(t) < now then
            {
                trackStatus(t) := Crossing
                passingTime(t) := now + 3
            }

        if trackStatus(t) = Crossing then
            if passingTime(t) < now then
                trackStatus(t) := Empty
    }
