// Dining Philosphers example
//
// Adopted from https://github.com/CoreASM/coreasm.core/blob/master/org.coreasm.engine/test-rsc/without_test_class/DiningPhilosophers.casm
//
// Original Authors:
// George Ma, Roozbeh Farahbod (CoreASM)

[asynchronous] CASM

enumeration Chopstick = { A, B, C, D, E }
enumeration Person = { Juan, Sina, Herbert, Albert, Fredrich }

using Agent = Person

init {
    (Person::Juan) -> @Philosopher,
    (Person::Sina) -> @Philosopher,
    (Person::Herbert) -> @Philosopher,
    (Person::Albert) -> @Philosopher,
    (Person::Fredrich) -> @Philosopher
}

// TABLE:  A  Herbert  B  Fredrich  C  Sina  D  Juan  E  Albert  A
[static] function chops : Person -> (Chopstick, Chopstick) = {
    (Person::Juan) -> (Chopstick::E, Chopstick::D),
    (Person::Sina) -> (Chopstick::D, Chopstick::C),
    (Person::Herbert) -> (Chopstick::B, Chopstick::A),
    (Person::Albert) -> (Chopstick::A, Chopstick::E),
    (Person::Fredrich) -> (Chopstick::C, Chopstick::B)
}

derived leftChop(person : Person) -> Chopstick =
    chops(person).1

derived rightChop(person : Person) -> Chopstick =
    chops(person).2

function eating : Person -> Boolean defined { false }
function chopOwner: Chopstick -> Person

function hungry : Person -> Boolean = {
    (Person::Juan) -> flipCoin,
    (Person::Sina) -> flipCoin,
    (Person::Herbert) -> flipCoin,
    (Person::Albert) -> flipCoin,
    (Person::Fredrich) -> flipCoin
}

derived canPickBothChopsticks -> Boolean =
    chopOwner(leftChop(self)) = undef and chopOwner(rightChop(self)) = undef

derived flipCoin -> Boolean =
    choose c in Boolean do c

rule StartEating = {
    chopOwner(leftChop(self)) := self
    chopOwner(rightChop(self)) := self
    eating(self) := true
    println(self as String + " starts eating.")
}

rule StopEating = {
    chopOwner(leftChop(self)) := undef
    chopOwner(rightChop(self)) := undef
    eating(self) := false
    println(self as String + " stops eating.")
}

rule Philosopher = {
    if hungry(self) and not eating(self) then
        if canPickBothChopsticks then
            StartEating
        else
            println(self as String + " is hungry but can't eat.")

    if not hungry(self) and eating(self) then
        StopEating

    hungry(self) := flipCoin
}

invariant philisopherOwnsBothChopsIfEating =
    forall p in Person holds
        eating(p) implies (chopOwner(leftChop(p)) = p and chopOwner(rightChop(p)) = p)
