//
//  Copyright (C) 2014-2024 CASM Organization <https://casm-lang.org>
//  All rights reserved.
//
//  Developed by: Philipp Paulweber et al.
//  <https://github.com/casm-lang/libcasm-tc/graphs/contributors>
//
//  This file is part of libcasm-tc.
//
//  libcasm-tc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  libcasm-tc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with libcasm-tc. If not, see <http://www.gnu.org/licenses/>.
//
//  Additional permission under GNU GPL version 3 section 7
//
//  libcasm-tc is distributed under the terms of the GNU General Public License
//  with the following clarification and special exception: Linking libcasm-tc
//  statically or dynamically with other modules is making a combined work
//  based on libcasm-tc. Thus, the terms and conditions of the GNU General
//  Public License cover the whole combination. As a special exception,
//  the copyright holders of libcasm-tc give you permission to link libcasm-tc
//  with independent modules to produce an executable, regardless of the
//  license terms of these independent modules, and to copy and distribute
//  the resulting executable under terms of your choice, provided that you
//  also meet, for each linked independent module, the terms and conditions
//  of the license of that module. An independent module is a module which
//  is not derived from or based on libcasm-tc. If you modify libcasm-tc, you
//  may extend this exception to your version of the library, but you are
//  not obliged to do so. If you do not wish to do so, delete this exception
//  statement from your version.
//

// a small brainfuck interpreter

CASM

init BrainFuckMachine

enumeration Token =
{
    Minus,
    Plus,
    Lesser,
    Greater,
    LeftParen,
    RightParen,
    Dot,
    Comma
}

[static] function prog: Integer -> Token = // TODO load it from file and operate on string directly
{
    (0) -> Plus,
    (1) -> Plus,
    (2) -> Plus,
    (3) -> Plus,
    (4) -> Plus,
    (5) -> Plus,
    (6) -> Plus,
    (7) -> Plus,
    (8) -> Plus,
    (9) -> Plus,
    (10) -> LeftParen,
    (11) -> Greater,
    (12) -> Plus,
    (13) -> Plus,
    (14) -> Plus,
    (15) -> Plus,
    (16) -> Plus,
    (17) -> Plus,
    (18) -> Plus,
    (19) -> Greater,
    (20) -> Plus,
    (21) -> Plus,
    (22) -> Plus,
    (23) -> Plus,
    (24) -> Plus,
    (25) -> Plus,
    (26) -> Plus,
    (27) -> Plus,
    (28) -> Plus,
    (29) -> Plus,
    (30) -> Greater,
    (31) -> Plus,
    (32) -> Plus,
    (33) -> Plus,
    (34) -> Greater,
    (35) -> Plus,
    (36) -> Lesser,
    (37) -> Lesser,
    (38) -> Lesser,
    (39) -> Lesser,
    (40) -> Minus,
    (41) -> RightParen,
    (42) -> Greater,
    (43) -> Plus,
    (44) -> Plus,
    (45) -> Dot,
    (46) -> Greater,
    (47) -> Plus,
    (48) -> Dot,
    (49) -> Plus,
    (50) -> Plus,
    (51) -> Plus,
    (52) -> Plus,
    (53) -> Plus,
    (54) -> Plus,
    (55) -> Plus,
    (56) -> Dot,
    (57) -> Dot,
    (58) -> Plus,
    (59) -> Plus,
    (60) -> Plus,
    (61) -> Dot,
    (62) -> Greater,
    (63) -> Plus,
    (64) -> Plus,
    (65) -> Dot,
    (66) -> Lesser,
    (67) -> Lesser,
    (68) -> Plus,
    (69) -> Plus,
    (70) -> Plus,
    (71) -> Plus,
    (72) -> Plus,
    (73) -> Plus,
    (74) -> Plus,
    (75) -> Plus,
    (76) -> Plus,
    (77) -> Plus,
    (78) -> Plus,
    (79) -> Plus,
    (80) -> Plus,
    (81) -> Plus,
    (82) -> Plus,
    (83) -> Dot,
    (84) -> Greater,
    (85) -> Dot,
    (86) -> Plus,
    (87) -> Plus,
    (88) -> Plus,
    (89) -> Dot,
    (90) -> Minus,
    (91) -> Minus,
    (92) -> Minus,
    (93) -> Minus,
    (94) -> Minus,
    (95) -> Minus,
    (96) -> Dot,
    (97) -> Minus,
    (98) -> Minus,
    (99) -> Minus,
    (100) -> Minus,
    (101) -> Minus,
    (102) -> Minus,
    (103) -> Minus,
    (104) -> Minus,
    (105) -> Dot,
    (106) -> Greater,
    (107) -> Plus,
    (108) -> Dot,
    (109) -> Greater,
    (110) -> Dot
}

[static] function ASCII: Integer'[0..255] -> String = // TODO remove when CASM supports characters
{
    (10) -> "\n",
    (32) -> " ",
    (33) -> "!",
    (34) -> "\"",
    (35) -> "#",
    (36) -> "$",
    (37) -> "%",
    (38) -> "&",
    (39) -> "'",
    (40) -> "(",
    (41) -> ")",
    (42) -> "*",
    (43) -> "+",
    (44) -> ",",
    (45) -> "-",
    (46) -> ".",
    (47) -> "/",
    (48) -> "0",
    (49) -> "1",
    (50) -> "2",
    (51) -> "3",
    (52) -> "4",
    (53) -> "5",
    (54) -> "6",
    (55) -> "7",
    (56) -> "8",
    (57) -> "9",
    (58) -> ":",
    (59) -> ";",
    (60) -> "<",
    (61) -> "=",
    (62) -> ">",
    (63) -> "?",
    (64) -> "@",
    (65) -> "A",
    (66) -> "B",
    (67) -> "C",
    (68) -> "D",
    (69) -> "E",
    (70) -> "F",
    (71) -> "G",
    (72) -> "H",
    (73) -> "I",
    (74) -> "J",
    (75) -> "K",
    (76) -> "L",
    (77) -> "M",
    (78) -> "N",
    (79) -> "O",
    (80) -> "P",
    (81) -> "Q",
    (82) -> "R",
    (83) -> "S",
    (84) -> "T",
    (85) -> "U",
    (86) -> "V",
    (87) -> "W",
    (88) -> "X",
    (89) -> "Y",
    (90) -> "Z",
    (91) -> "[",
    (92) -> "\\",
    (93) -> "]",
    (94) -> "^",
    (95) -> "_",
    (96) -> "`",
    (97) -> "a",
    (98) -> "b",
    (99) -> "c",
    (100) -> "d",
    (101) -> "e",
    (102) -> "f",
    (103) -> "g",
    (104) -> "h",
    (105) -> "i",
    (106) -> "j",
    (107) -> "k",
    (108) -> "l",
    (109) -> "m",
    (110) -> "n",
    (111) -> "o",
    (112) -> "p",
    (113) -> "q",
    (114) -> "r",
    (115) -> "s",
    (116) -> "t",
    (117) -> "u",
    (118) -> "v",
    (119) -> "w",
    (120) -> "x",
    (121) -> "y",
    (122) -> "z",
    (123) -> "{",
    (124) -> "|",
    (125) -> "}",
    (126) -> "~"
}

[monitored] function userInput: -> Integer'[0..255]

function mem: Integer -> Integer'[0..255] defined { 0 }

function ip: -> Integer = { 0 } // instruction pointer
function mp: -> Integer = { 0 } // memory pointer

rule BrainFuckMachine =
{|
    case prog(ip) of {
        Greater:    mp := mp + 1
        Lesser:     mp := mp - 1
        Plus:       mem(mp) := mem(mp) + 1
        Minus:      mem(mp) := mem(mp) - 1
        Dot:        print(ASCII(mem(mp)))
        Comma:      mem(mp) := userInput
        LeftParen:  if mem(mp) = 0 then JumpForward
        RightParen: if mem(mp) != 0 then JumpBack
        undef:      program(self) := undef
        _:          skip
    }

    AdvanceInstructionPointer
|}

rule AdvanceInstructionPointer =
    ip := ip + 1

rule RetreatInstructionPointer =
    ip := ip - 1

rule JumpForward =
    Jump(@AdvanceInstructionPointer, +1)

rule JumpBack =
    Jump(@RetreatInstructionPointer, -1)

rule Jump(step: RuleRef<-> Void>, initialBracketCount: Integer) =
    local bc: -> Integer = { initialBracketCount } in
    while bc != 0 do {|
        step()()
        case prog(ip) of
        {
            LeftParen:  bc := bc + 1
            RightParen: bc := bc - 1
            undef:      abort // bf syntax error: branch mismatch
        }
    |}
