//  
//  Copyright (c) 2014-2016 CASM Organization
//  All rights reserved.
//  
//  Developed by: Philipp Paulweber
//                Emmanuel Pescosta
//                https://github.com/casm-lang/libcasm-tc
//  
//  This file is part of libcasm-tc.
//  
//  libcasm-tc is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  
//  libcasm-tc is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License
//  along with libcasm-tc. If not, see <http://www.gnu.org/licenses/>.
//  

//@ TC()

CASM init foo

function a : -> RuleRef
function b : Integer -> Integer initially {1->0, 2->0}

rule bar( m:Integer, x:Integer, y:Integer ) =
{|
    if m = 1 then {
        b(x) := 1
    } else {
        b(x) := b(x) + y
        }
|}

rule foo =
{|
 a := @bar
 par
 forall i in [1..2] do
    seq
        call (a)(1,i,undef)
        call (a)(2,i,1)
    endseq
 endpar
 print b(1) + b(2)
 program(self) := undef
|}

